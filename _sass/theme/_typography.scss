// ============================================================================
// typography.scss — token-first, baseline-aware, utility-rich
// Depends on: variables.scss, mixins.scss (rootsize, fontsize, baseline, sassline)
// ============================================================================

// -----------------------------
// 1) Root + Base
// -----------------------------
html {
  @include rootsize; // from your legacy mixins (uses $rootsizes/$breakpoints)

  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
}

body {
  // Fallback to tokens first (works even if modular scale isn't present)
  font-family: unquote(map-get($bodytype, font-family));
  font-style: normal;
  font-weight: map-get($bodytype, regular);
  font-size: var(--sf-text-base);
  line-height: var(--sf-leading-relaxed);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  // If you’ve defined $modular-scale, enable rhythm:
  @if global-variable-exists(modular-scale) {
    // keep body rhythm consistent on all breakpoints
    @include fontsize(zeta, all);
    line-height: 2rem;
  }
}

// -----------------------------
// 2) Links
// -----------------------------
a {
  color: var(--link-fg);
  text-decoration: none;
  background-image: linear-gradient(var(--link-fg), var(--link-fg));
  background-position: 0% 100%;
  background-repeat: no-repeat;
  background-size: 0% 1px;
  transition: background-size .2s ease, color .2s ease;

  &:hover, &:active, &:focus {
    color: var(--link-hover-fg);
    background-size: 100% 1px;
    text-decoration: none;
  }
}

// remove underline effect from component links / empty links
a:empty, .sf-btn, .sf-nav--desktop__link, .doc-sidebar-nav a {
  background-image: none !important;
  &:hover { background-size: 0% 1px !important; }
}

// -----------------------------
// 3) Typeset block
// -----------------------------
.typeset {

  // Nice underlines on text links (classic style)
  p a, li a {
    background-image: linear-gradient(to bottom, rgba(0,0,0,0) 50%, var(--link-fg) 50%);
    background-position: 0 93%;
    background-repeat: repeat-x;
    background-size: 100% 0.15rem;
    text-shadow:
      0.1rem 0 var(--sf-bg-2),
      0.15rem 0 var(--sf-bg-2),
     -0.1rem 0 var(--sf-bg-2),
     -0.15rem 0 var(--sf-bg-2);

    &:hover, &:active, &:focus {
      background-image: linear-gradient(to bottom, rgba(0,0,0,0) 50%, var(--link-hover-fg) 50%);
    }
  }

  // Paragraphs
  p {
    // Rhythm + baseline if modular scale exists
    @if global-variable-exists(modular-scale) {
      @include baseline($fontsize: zeta, $font: $bodytype, $lineheight: 2, $below: 2, $breakpoint: all);
    }
    // Always keep nice OT features
    font-feature-settings: 'kern', 'onum', 'liga';
    max-width: var(--sf-measure);
    text-wrap: pretty;
  }

  // Headings
  h1, h2, h3, h4, h5, h6 {
    color: var(--heading-fg);
    font-family: unquote(map-get($headingtype, font-family));
    font-feature-settings: 'dlig', 'liga', 'lnum', 'kern';
    font-style: normal;
    font-weight: map-get($headingtype, bold);
    line-height: var(--sf-leading-tight);
    margin-block: var(--sf-space-8) var(--sf-space-4);
    text-wrap: balance;

    &:first-child { margin-top: 0; }
  }

  // With modular scale → use sassline
  @if global-variable-exists(modular-scale) {
    h1, .alpha   { @include sassline($fontsize: alpha,   $font: $headingtype, $lineheight: 3, $below: 1, $breakpoint: all); }
    h2, .beta    { @include sassline(beta,   $headingtype, 3, 1, all); }
    h3, .gamma   { @include sassline(gamma,  $headingtype, 3, 1, all); }
    h4, .delta   { @include sassline(delta,  $headingtype, 2, 0, all); }
    h5, .epsilon { @include sassline(epsilon,$headingtype, 2, 0, all); }
    h6, .zeta    { @include sassline(zeta,   $headingtype, 2, 0, all); }
  } @else {
    // Fallback to tokens if no scale is present
    h1, .alpha   { font-size: var(--sf-text-3xl); }
    h2, .beta    { font-size: var(--sf-text-2xl); }
    h3, .gamma   { font-size: var(--sf-text-xl);  }
    h4, .delta   { font-size: var(--sf-text-lg);  }
    h5, .epsilon { font-size: var(--sf-text-base); font-weight: map-get($font-weights, 'semibold'); }
    h6, .zeta    { font-size: var(--sf-text-sm);   font-weight: map-get($font-weights, 'semibold'); }
  }

  // Lists
  ul, ol {
    @if global-variable-exists(modular-scale) {
      @include baseline(zeta, $bodytype, 2, 2, all);
    }
    padding-left: var(--sf-space-5);
    margin-bottom: var(--sf-space-4);

    li {
      font-feature-settings: 'kern', 'onum', 'liga';
      margin-left: 2rem; // classic indent

      @include breakpoint(break-1) { margin-left: 0; }

      ol, ul {
        padding-top: 1rem;
        margin-bottom: 1rem;
        margin-left: 2rem;
      }
    }
  }

  // Ordered list counters
  ol {
    list-style-type: none;

    li {
      counter-increment: top-level;

      &:before {
        content: counter(top-level) '.';
        font-feature-settings: 'lnum', 'tnum';
        margin-left: -3rem;
        position: absolute;
        text-align: right;
        width: 2em;
      }

      ul li {
        &:before { content: ''; }

        ol li {
          counter-increment: alt-level;
          &:before { content: counter(alt-level) '.'; }
        }
      }

      ol li {
        counter-increment: sub-level;

        &:before { content: counter(top-level) '.' counter(sub-level); }

        ul li { &:before { content: ''; } }

        ol li {
          counter-increment: sub-sub-level;
          &:before { content: counter(top-level) '.' counter(sub-level) '.' counter(sub-sub-level); }
        }
      }
    }
  }

  // Definition lists
  dl {
    @if global-variable-exists(modular-scale) {
      @include baseline(zeta, $bodytype, 2, 2, all);
    }

    dt, dd {
      font-feature-settings: 'kern', 'onum', 'liga';
      margin-left: 2rem;
      @include breakpoint(break-1) { margin-left: 0; }
    }

    dt { font-weight: map-get($bodytype, bold); }
    dd + dt { padding-top: 1rem; }
  }

  // Tables
  table {
    @if global-variable-exists(modular-scale) {
      @include sassline(eta, $headingtype, 2, 0, all);
    } @else {
      font-size: var(--sf-text-base);
      line-height: var(--sf-leading-normal);
    }

    font-family: unquote(map-get($headingtype, font-family));
    font-feature-
