/* ============================================================================
   ABSTRACTS / MIXINS (DEFINITIVE & BACKWARD-COMPATIBLE)
   A powerful and well-documented library of reusable SCSS functions.
   - Uses older, universally compatible Sass syntax to prevent build errors.
   - Includes all original functionality plus new, powerful helpers.
   ============================================================================ */

/* ============================================================================
   1. RESPONSIVE DESIGN
   ============================================================================ */

/**
 * Applies styles from a specific breakpoint and up (mobile-first).
 * This uses the original, reliable if/else structure.
 * @param {string} $point - The breakpoint name (e.g., 'sm', 'md', 'lg').
 * @example @include breakpoint(md) { ...styles for medium screens and up... }
 */
@mixin breakpoint($point) {
  @if $point == xs { @media (min-width: $bp-xs) { @content; } }
  @else if $point == sm { @media (min-width: $bp-sm) { @content; } }
  @else if $point == md { @media (min-width: $bp-md) { @content; } }
  @else if $point == lg { @media (min-width: $bp-lg) { @content; } }
  @else if $point == xl { @media (min-width: $bp-xl) { @content; } }
  @else { @warn "Breakpoint '#{$point}' not found. Check your $bp-* variables."; }
}

/**
 * [NEW] Applies styles below a specific breakpoint.
 * @param {string} $point - The breakpoint name from the $breakpoints map.
 * @example @include breakpoint-down(md) { ...styles for screens smaller than 'md'... }
 */
@mixin breakpoint-down($point) {
  @if map-has-key($breakpoints, $point) {
    @media (max-width: map-get($breakpoints, $point) - 0.02em) { // Use 'em' for compatibility
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$point}' not found in the $breakpoints map.";
  }
}

/* ============================================================================
   2. TYPOGRAPHY HELPERS
   ============================================================================ */

/**
 * Enables smoother font rendering on most browsers.
 */
@mixin antialiased {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/**
 * A shorthand for setting multiple typography properties at once.
 */
@mixin text($size: var(--sf-text-base), $weight: 400, $line: var(--sf-leading-normal), $tracking: 0) {
  font-size: $size;
  font-weight: $weight;
  line-height: $line;
  letter-spacing: $tracking;
}

/**
 * Truncates text to a specific number of lines with an ellipsis.
 */
@mixin truncate($lines: 1) {
  @if $lines == 1 { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
  @else { display: -webkit-box; -webkit-line-clamp: $lines; -webkit-box-orient: vertical; overflow: hidden; }
}


/* ============================================================================
   3. ACCESSIBILITY & INTERACTION
   ============================================================================ */

@mixin sr-only { position: absolute !important; width:1px; height:1px; padding:0; margin:-1px; overflow:hidden; clip:rect(0, 0, 0, 0); white-space:nowrap; border:0; }
@mixin not-sr-only { position: static; width:auto; height:auto; padding:0; margin:0; overflow:visible; clip:auto; white-space:normal; }
@mixin focus-ring { outline: none; box-shadow: var(--sf-focus-ring); border-radius: 2px; }
@mixin focus-visible { &:focus-visible { @include focus-ring; } }
@mixin hover { @media (hover: hover) and (pointer: fine) { &:hover { @content; } } }
@mixin motion-safe { @media (prefers-reduced-motion: no-preference) { @content; } }
@mixin motion-reduce { @media (prefers-reduced-motion: reduce) { @content; } }


/* ============================================================================
   4. LAYOUT PRIMITIVES
   ============================================================================ */

@mixin container($size: md) {
  width: min(calc(100% - (2 * var(--sf-space-4))), var(--sf-container-#{$size}));
  margin-inline: auto;
  padding-inline: var(--sf-space-4);
}
@mixin grid($cols: 12, $gap: 1.5rem) { display: grid; grid-template-columns: repeat(#{$cols}, minmax(0, 1fr)); gap: $gap; }
@mixin grid-col-span($span) { grid-column: span #{$span} / span #{$span}; }
@mixin stack($gap: var(--sf-space-4)) { display:flex; flex-direction:column; gap:$gap; }
@mixin cluster($gap: var(--sf-space-3), $align: center, $justify: flex-start, $wrap: wrap) { display:flex; flex-wrap:$wrap; align-items:$align; justify-content:$justify; gap:$gap; }
@mixin center($axis: both) { display:flex; @if $axis == both { align-items:center; justify-content:center; } @else if $axis == x { justify-content:center; } @else if $axis == y { align-items:center; } }


/* ============================================================================
   5. EFFECTS & RESETS
   ============================================================================ */

@mixin border($color: var(--border-color)) { border: 1px solid $color; }
@mixin ring($size: .14rem, $color: rgba(1,118,211,.9)) { box-shadow: 0 0 0 $size $color; }
@mixin elevation($level: sm) {
  @if $level == sm { box-shadow: var(--sf-shadow-sm); }
  @else if $level == md { box-shadow: var(--sf-shadow-md); }
  @else if $level == lg { box-shadow: var(--sf-shadow-lg); }
}

@mixin aspect-ratio($w, $h) { aspect-ratio: #{$w} / #{$h}; @supports not (aspect-ratio: #{$w} / #{$h}) { position: relative; &::before { content:""; display:block; padding-top: calc(#{$h} / #{$w} * 100%); } > * { position:absolute; inset:0; } } }

@mixin button-reset { appearance: none; background: none; border: 0; padding: 0; font: inherit; color: inherit; cursor: pointer; }
@mixin input-reset { appearance: none; background: none; border: 0; padding: 0; font: inherit; color: inherit; }

@mixin control-base($height: var(--sf-control-height-md), $pad-x: var(--sf-space-3)) {
  min-height: $height;
  padding-inline: $pad-x;
  border-radius: var(--sf-radius-md);
  background: var(--sf-gray-100);
  color: var(--sf-gray-800);
  border: 1px solid var(--sf-gray-400);
}


/* ============================================================================
   6. ICONS & MEDIA
   ============================================================================ */
@mixin icon-size($size: 1.25rem) { width:$size; height:$size; flex-shrink: 0; }
@mixin media-cover { width:100%; height:100%; object-fit:cover; }