/* ============================================================================
   ABSTRACTS / MIXINS
   A powerful and well-documented library of reusable SCSS functions to
   enforce consistency, reduce repetition, and speed up development.
   ============================================================================ */
@use "sass:map";

/* ============================================================================
   1. RESPONSIVE DESIGN
   ============================================================================ */

/**
 * Applies styles from a specific breakpoint and up (mobile-first).
 * @param {string} $point - The breakpoint name (e.g., 'sm', 'md', 'lg').
 * @example @include breakpoint(md) { ...styles for medium screens and up... }
 */
@mixin breakpoint($point) {
  @if map.has-key($breakpoints, $point) {
    @media (min-width: map.get($breakpoints, $point)) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$point}' not found in the $breakpoints map in _variables.scss.";
  }
}

/**
 * Applies styles below a specific breakpoint (desktop-first).
 * @param {string} $point - The breakpoint name.
 * @example @include breakpoint-down(md) { ...styles for screens smaller than 'md'... }
 */
@mixin breakpoint-down($point) {
  @if map.has-key($breakpoints, $point) {
    @media (max-width: map.get($breakpoints, $point) - 0.02px) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$point}' not found in $breakpoints map.";
  }
}

/**
 * Applies styles between two specific breakpoints.
 * @param {string} $lower - The lower breakpoint name.
 * @param {string} $upper - The upper breakpoint name.
 * @example @include breakpoint-between(sm, lg) { ...styles for tablets... }
 */
@mixin breakpoint-between($lower, $upper) {
  @if map.has-key($breakpoints, $lower) and map.has-key($breakpoints, $upper) {
    @media (min-width: map.get($breakpoints, $lower)) and (max-width: map.get($breakpoints, $upper) - 0.02px) {
      @content;
    }
  } @else {
    @warn "One or both breakpoints ('#{$lower}', '#{$upper}') not found in $breakpoints map.";
  }
}


/* ============================================================================
   2. TYPOGRAPHY HELPERS
   ============================================================================ */

/**
 * Enables smoother font rendering on most browsers.
 * @example @include font-smoothing;
 */
@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/**
 * Truncates text to a specific number of lines with an ellipsis.
 * @param {number} $lines - The number of lines to show.
 * @example @include truncate(2); // Truncates after the second line
 */
@mixin truncate($lines: 1) {
  @if $lines == 1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}


/* ============================================================================
   3. ACCESSIBILITY & INTERACTION
   ============================================================================ */

/**
 * Visually hides an element but keeps it accessible to screen readers.
 * @example .skip-link { @include sr-only; }
 */
@mixin sr-only {
  position: absolute !important;
  width: 1px; height: 1px;
  padding: 0; margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/**
 * Applies a consistent, accessible focus ring using design tokens.
 * @example button { @include focus-visible; }
 */
@mixin focus-ring {
  outline: none;
  box-shadow: var(--focus-ring);
  border-radius: 2px;
}
@mixin focus-visible {
  &:focus-visible {
    @include focus-ring;
  }
}

/**
 * Restricts hover effects to devices that can truly hover (not touchscreens).
 * @example .card { @include hover { background-color: blue; } }
 */
@mixin hover {
  @media (hover: hover) and (pointer: fine) {
    &:hover {
      @content;
    }
  }
}

/**
 * Guards animations for users who prefer reduced motion.
 * @example @include motion-safe { transition: transform .3s ease; }
 */
@mixin motion-safe {
  @media (prefers-reduced-motion: no-preference) {
    @content;
  }
}


/* ============================================================================
   4. LAYOUT PRIMITIVES
   ============================================================================ */

/**
 * Centers a child element within a parent using flexbox.
 * @param {string} $axis - 'x', 'y', or 'both'.
 * @example .parent { @include center; }
 */
@mixin center($axis: 'both') {
  display: flex;
  @if $axis == 'both' {
    align-items: center;
    justify-content: center;
  } @else if $axis == 'x' {
    justify-content: center;
  } @else if $axis == 'y' {
    align-items: center;
  }
}

/**
 * Creates a horizontal list of items with consistent spacing.
 * @example .card-tags { @include cluster(var(--sf-space-2)); }
 */
@mixin cluster($gap: var(--sf-space-3), $align: center, $justify: flex-start) {
  display: flex;
  flex-wrap: wrap;
  align-items: $align;
  justify-content: $justify;
  gap: $gap;
}

/**
 * Stacks items vertically with consistent spacing.
 * @example .form-fields { @include stack; }
 */
@mixin stack($gap: var(--sf-space-4)) {
  display: flex;
  flex-direction: column;
  gap: $gap;
}

/**
 * Centers an absolutely positioned element within a relative parent.
 * @example .modal { position: relative; .modal__content { @include absolute-center; } }
 */
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/**
 * Makes an absolutely positioned element fill its relative parent.
 * @example .hero::before { @include absolute-fill; }
 */
@mixin absolute-fill {
  position: absolute;
  inset: 0; // shorthand for top, right, bottom, left
}


/* ============================================================================
   5. EFFECTS & RESETS
   ============================================================================ */

/**
 * Applies a consistent box-shadow based on the elevation token system.
 * @param {string} $level - '1', '2', '3', or '4'.
 * @example .card { @include elevation('2'); }
 */
@mixin elevation($level: '2') {
  box-shadow: map-get($elevations, $level);
}

/**
 * Creates a fixed aspect ratio box that works even in older browsers.
 * @param {number} $width - The width ratio.
 * @param {number} $height - The height ratio.
 * @example .card__image { @include aspect-ratio(16, 9); }
 */
@mixin aspect-ratio($width, $height) {
  aspect-ratio: #{$width} / #{$height};
  @supports not (aspect-ratio: #{$width} / #{$height}) {
    position: relative;
    &::before {
      content: '';
      display: block;
      padding-top: calc(#{$height} / #{$width} * 100%);
    }
    > * {
      @include absolute-fill;
    }
  }
}

/**
 * Resets the default browser styles for buttons.
 * @example button { @include button-reset; }
 */
@mixin button-reset {
  padding: 0;
  border: none;
  font: inherit;
  color: inherit;
  background-color: transparent;
  cursor: pointer;
}