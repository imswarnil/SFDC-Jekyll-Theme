/* ============================================================================
   ABSTRACTS / MIXINS
   Reusable SCSS blocks to enforce consistency, reduce repetition, and
   provide powerful shortcuts for common patterns.
   ============================================================================ */

@use "sass:map";

// --- Media Queries (UPGRADED) ---
// This single, map-driven mixin replaces the need for if/else chains.
// It retrieves the breakpoint value from the `$sfdc-breakpoints` map.
// If you add a new breakpoint to the map (e.g., "xl"), this mixin
// will work with it automatically.
@mixin sfdc-respond-from($breakpoint) {
  @if map-has-key($sfdc-breakpoints, $breakpoint) {
    @media (min-width: map-get($sfdc-breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Breakpoint `#{$breakpoint}` not found. Check your $sfdc-breakpoints map in _variables.scss.";
  }
}


// --- Element States & Accessibility ---
// Applies the standard, accessible focus ring style.
@mixin sfdc-focus-ring {
  outline: none;
  box-shadow: var(--sfdc-focus);
  border-radius: var(--sfdc-radius-sm);
}

// A shortcut for applying styles to both hover and focus states.
// Essential for ensuring keyboard accessibility matches mouse interaction.
@mixin sfdc-on-hover-focus {
  &:hover,
  &:focus-visible {
    @content;
  }
}

// Hides an element visually while keeping it accessible to screen readers.
// Perfect for labels on icon-only buttons.
@mixin sfdc-visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}


// --- Component & Layout Helpers ---
// A mixin to generate a button or badge variant from a background color.
// It will automatically calculate a high-contrast text color. This is
// extremely powerful for creating your button and badge components.
@mixin sfdc-button-variant($background-color) {
  background-color: $background-color;
  // Automatically determine if text should be light or dark for accessibility
  color: if(lightness($background-color) > 50, var(--sfdc-ink), var(--sfdc-bg-hard));

  // Darken the background on hover for a nice interactive feel
  @include sfdc-on-hover-focus {
    background-color: darken($background-color, 8%);
  }
}

// A simple mixin for creating flexbox containers.
// This will be useful for your navbar, card, and layout components.
@mixin sfdc-flex($justify: flex-start, $align: stretch, $gap: 0) {
  display: flex;
  justify-content: $justify;
  align-items: $align;
  gap: $gap;
}


// --- Typography Helpers ---
// Truncates text with an ellipsis if it overflows its container.
// Very useful for card titles or short descriptions.
@mixin sfdc-text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}