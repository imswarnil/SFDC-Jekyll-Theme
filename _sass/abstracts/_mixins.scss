/* ============================================================================
   ABSTRACTS / MIXINS
   Reusable style blocks for generating CSS patterns efficiently.
   ============================================================================ */

// -- Responsive --
@mixin sfdc-respond-from($bp) {
  @media (min-width: sfdc-breakpoint($bp)) { @content; }
}

@mixin sfdc-respond-to($bp) {
  @media (max-width: #{sfdc-breakpoint($bp) - 0.02}) { @content; }
}

// -- Typography --
@mixin sfdc-fluid-type($min-fs, $max-fs) {
  font-size: clamp(sfdc-font-size($min-fs), 1rem + 2.5vw, sfdc-font-size($max-fs));
}

@mixin sfdc-text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// -- Layout & Positioning --
@mixin sfdc-center-xy($position: absolute) {
  position: $position;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}

@mixin sfdc-clearfix {
  &::after {
    content: "";
    display: block;
    clear: both;
  }
}

// -- Element Appearance --
@mixin sfdc-on-hover-focus {
  &:hover, &:focus-visible { @content; }
}

// -- Utility Generation --
// A powerful mixin to generate utility classes from a map.
@mixin sfdc-generate-utilities($property, $map, $prefix) {
  @if $sfdc-enable-utility-classes {
    @each $key, $value in $map {
      .#{$prefix}-#{$key} {
        #{$property}: $value !important;
      }
      // Generate responsive versions, e.g., .mt-4-md
      @each $bp-key, $bp-value in $sfdc-breakpoints {
        @include sfdc-respond-from($bp-key) {
          .#{$prefix}-#{$key}-#{$bp-key} {
            #{$property}: $value !important;
          }
        }
      }
    }
  }
}