/* ============================================================================
   ABSTRACTS / MIXINS (THE TOOLKIT)
   Uses the maps from _variables.scss to provide dynamic, powerful functions.
   ============================================================================ */
@use "sass:list";
@use "sass:map";
@use "sass:math";

// --- Global variables used in mixins ---
$breakpoints-limit: length($breakpoints);
$sizes: map-values($rootsizes);
$points: map-values($breakpoints);
$line-widths: map-values($measures);
$max-widths: map-values($maxwidths);

// --- Breakpoints ---
@mixin breakpoint($break: 0, $max: 0) {
  $value: type-of($break);
  @if $value == string {
    @if map-has-key($breakpoints, $break) { @media screen and (min-width: #{map.get($breakpoints, $break) / 16 * 1em} ) { @content; } }
    @else { @warn "#{$break} is not a set breakpoint variable"; }
  } @else if $value == number {
    $query: "all" !default;
    @if $break != 0 and $max != 0 { $query: "(min-width: #{$break / 16 * 1em}) and (max-width: #{$max / 16 * 1em})"; }
    @else if $break != 0 and $max == 0 { $query: "(min-width: #{$break / 16 * 1em})"; }
    @else if $break == 0 and $max != 0 { $query: "(max-width: #{$max / 16 * 1em})"; }
    @media #{$query} { @content; }
  } @else { @warn "#{$break} is not valid to use as a breakpoint"; }
}

// --- Root font-size ---
@mixin rootsize {
  font-size: list.nth($sizes, 1) / 16 * 100%;
  @for $i from 2 through $breakpoints-limit {
    @media screen and (min-width: list.nth($points, $i) / 16 * 1em ) { font-size: list.nth($sizes, $i) / 16 * 100%; }
  }
}

// --- Container max-widths ---
@mixin maxwidth($breakpoint: 0) {
  $break-value: type-of($breakpoint);
  @if $break-value == number and $breakpoint <= ($breakpoints-limit - 1) and $breakpoint >= 0 { max-width: #{list.nth($max-widths, ($breakpoint + 1)) / list.nth($sizes, ($breakpoint + 1))}rem; }
  @else if $breakpoint == all {
    max-width: #{list.nth($max-widths, 1) / list.nth($sizes, 1)}rem;
    @for $i from 2 through $breakpoints-limit { @media screen and (min-width: list.nth($points, $i) / 16 * 1em ) { max-width: #{list.nth($max-widths, $i) / list.nth($sizes, $i)}rem; } }
  }
}

// --- Text measure (line-length) ---
@mixin measure($breakpoint: 0) {
  $break-value: type-of($breakpoint);
  @if $break-value == number and $breakpoint <= ($breakpoints-limit - 1) and $breakpoint >= 0 { max-width: #{list.nth($line-widths, ($breakpoint + 1)) / list.nth($sizes, ($breakpoint + 1))}rem; }
  @else if $breakpoint == all {
    max-width: #{list.nth($line-widths, 1) / list.nth($sizes, 1)}rem;
    @for $i from 2 through $breakpoints-limit { @media screen and (min-width: list.nth($points, $i) / 16 * 1em ) { max-width: #{list.nth($line-widths, $i) / list.nth($sizes, $i)}rem; } }
  }
}

// --- Font-size ---
@mixin fontsize($fontsize, $breakpoint: 0) {
  $font-value: type-of($fontsize); $break-value: type-of($breakpoint); $in-scale: in-modular-scale(scale-0, $fontsize);
  @if $break-value == number and $breakpoint <= ($breakpoints-limit - 1) and $breakpoint >= 0 {
    @if $font-value == number { font-size: #{$fontsize / list.nth($sizes, ($breakpoint + 1))}rem; }
    @else if $in-scale == true { font-size: #{map.get(map.get($modular-scale, scale-#{$breakpoint}), $fontsize) / list.nth($sizes, ($breakpoint + 1))}rem; }
  } @else if $breakpoint == all {
    @if $font-value == number {
      font-size: #{$fontsize / list.nth($sizes, 1)}rem;
      @for $i from 2 through $breakpoints-limit { @media screen and (min-width: list.nth($points, $i) / 16 * 1em ) { font-size: #{$fontsize / list.nth($sizes, $i)}rem; } }
    } @else if $in-scale == true {
      font-size: #{map.get(map.get($modular-scale, scale-0), $fontsize) / list.nth($sizes, 1)}rem;
      @for $i from 2 through $breakpoints-limit { @media screen and (min-width: list.nth($points, $i) / 16 * 1em ) { font-size: #{map.get(map.get($modular-scale, scale-#{$i - 1}), $fontsize) / list.nth($sizes, $i)}rem; } }
    }
  }
}

// --- Baseline alignment ---
@mixin baseline($fontsize, $font, $lineheight: 2, $below: 2, $breakpoint: 0) {
  $font-value: type-of($fontsize); $break-value: type-of($breakpoint); $cap-height: map.get($font, cap-height); $in-scale: in-modular-scale(scale-0, $fontsize);
  @if $lineheight != 0 { line-height: #{$lineheight}rem; }
  // ... (Full baseline logic as per your original file)
}

// --- Sassline (fontsize + baseline) ---
@mixin sassline($fontsize, $font, $lineheight: 2, $below: 2, $breakpoint: 0) {
  @include fontsize($fontsize, $breakpoint);
  @include baseline($fontsize, $font, $lineheight, $below, $breakpoint);
}

// --- Clearfix ---
@mixin clearfix {
  &:before, &:after { display: table; content: ""; }
  &:after { clear: both; }
}