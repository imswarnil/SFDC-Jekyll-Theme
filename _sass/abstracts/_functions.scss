/* ============================================================================
   ABSTRACTS / FUNCTIONS
   Global helper functions for calculations, conversions, and map retrieval.
   ============================================================================ */

@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:string";

// -- Unit Conversion --
@function sfdc-rem($pixels) {
  @if meta.type-of($pixels) != 'number' or not math.is-unitless($pixels) {
    @error "sfdc-rem() requires a unitless number.";
  }
  @return math.div($pixels, $sfdc-base-font-size) * 1rem;
}

// -- Map Getters --
// Safely retrieves a value from any configuration map.
@function sfdc-get($map, $keys...) {
  @each $key in $keys {
    @if not map.has-key($map, $key) {
      @error "Key `#{$key}` not found in map.";
    }
    $map: map.get($map, $key);
  }
  @return $map;
}

// Specialized getters for cleaner API
@function sfdc-breakpoint($key) { @return sfdc-get($sfdc-breakpoints, $key); }
@function sfdc-color($key) { @return sfdc-get($sfdc-colors, $key); }
@function sfdc-spacing($key) { @return sfdc-get($sfdc-spacing, $key); }
@function sfdc-font-size($key) { @return sfdc-get($sfdc-font-sizes, $key); }
@function sfdc-z($layer) { @return sfdc-get($sfdc-z-layers, $layer); }

// -- String & SVG --
// Encodes a string for use in a data URI (e.g., inline SVG backgrounds).
@function sfdc-str-encode($string) {
  $output: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='#{sfdc-get($sfdc-colors, "text-muted")}' d='#{$string}'/%3E%3C/svg%3E";
  @return url($output);
}