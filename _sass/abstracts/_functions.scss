/* ============================================================================
   ABSTRACTS / FUNCTIONS
   Reusable SCSS functions for maps, spacing, math, and colors.
   Depends on: _variables.scss (maps) and tokens (CSS vars like --sf-*)
   ============================================================================ */

/* --------------------- Map Getters (safe) --------------------- */
/* Usage: z(sticky) -> 1000 */
@function z($key, $fallback: null) {
  @if map-has-key($z-stack, $key) { @return map-get($z-stack, $key); }
  @return $fallback;
}

/* Usage: duration(150) -> .15s */
@function duration($key, $fallback: .15s) {
  @if map-has-key($durations, $key) { @return map-get($durations, $key); }
  @return $fallback;
}

/* Usage: easing(standard) -> cubic-bezier(...) */
@function easing($key, $fallback: cubic-bezier(.2,0,0,1)) {
  @if map-has-key($easings, $key) { @return map-get($easings, $key); }
  @return $fallback;
}

/* Usage: container-size(lg) -> 64rem */
@function container-size($key, $fallback: 64rem) {
  @if map-has-key($container-sizes, $key) { @return map-get($container-sizes, $key); }
  @return $fallback;
}

/* Usage: control-height(md) -> 2.5rem */
@function control-height($key, $fallback: 2.5rem) {
  @if map-has-key($control-heights, $key) { @return map-get($control-heights, $key); }
  @return $fallback;
}

/* Usage: icon-size(md) -> 1.25rem */
@function icon-size($key, $fallback: 1.25rem) {
  @if map-has-key($icon-sizes, $key) { @return map-get($icon-sizes, $key); }
  @return $fallback;
}

/* --------------------- Spacing Bridge --------------------- */
/* Returns a CSS var reference from your spacing token scale.
   Usage: space(4) -> var(--sf-4)  */
@function space($k) {
  @return unquote("var(--sf-#{$k})");
}

/* --------------------- CSS Var Helper --------------------- */
/* Build a runtime CSS var reference by name.
   Usage: cssvar(sf-brand) -> var(--sf-brand) */
@function cssvar($name) {
  @return unquote("var(--#{$name})");
}

/* --------------------- Math & Units --------------------- */
/* strip-unit(16px) -> 16 */
@function strip-unit($value) {
  @if type-of($value) == "number" and not unitless($value) {
    @return $value / ($value * 0 + 1);
  }
  @return $value;
}

/* rem(16px) -> 1rem (assuming 16px root) */
@function rem($px, $base: 16px) {
  @return (strip-unit($px) / strip-unit($base)) * 1rem;
}

/* px-to-rem alias */
@function px-to-rem($px, $base: 16px) { @return rem($px, $base); }

/* ratio(16,9) -> calc(9 / 16 * 100%) (handy for padding hacks) */
@function ratio($w, $h) {
  @return unquote("calc(#{$h} / #{$w} * 100%)");
}

/* fluid clamp generator
   fluid(16px, 24px) -> clamp(1rem, calc( ... ), 1.5rem)
   You can tweak viewport min/max if needed. */
@function fluid($min, $max, $vmin: 320px, $vmax: 1440px) {
  $min-rem: rem($min);
  $max-rem: rem($max);
  $slope: (strip-unit($max) - strip-unit($min)) / (strip-unit($vmax) - strip-unit($vmin)) * 100;
  $intercept: strip-unit($min) - (strip-unit($vmin) * (strip-unit($max) - strip-unit($min)) / (strip-unit($vmax) - strip-unit($vmin)));
  @return clamp(#{$min-rem}, calc(#{$intercept/16}rem + #{$slope}vw), #{$max-rem});
}

/* --------------------- Color Utilities --------------------- */
/* alpha-color:
   - If given a real color: alpha-color(#0176d3, .2) -> rgba(1,118,211,.2)
   - If given a CSS var or any string: alpha-color(var(--sf-brand), .2)
     -> color-mix(in srgb, var(--sf-brand) 20%, transparent)
*/
@function alpha-color($color, $alpha) {
  @if type-of($color) == 'color' {
    @return rgba($color, $alpha);
  }
  $pct: #{round($alpha * 100%)}; // "20%"
  @return unquote("color-mix(in srgb, #{$color} #{$pct}, transparent)");
}

/* mix-on-bg: mix a color over a background with given opacity
   mix-on-bg(var(--sf-brand), var(--sf-bg-2), .12) */
@function mix-on-bg($fg, $bg, $alpha) {
  @return unquote("color-mix(in srgb, #{$fg} #{round($alpha * 100%)}, #{$bg})");
}

/* --------------------- Timing Shorthands --------------------- */
/* transition(value, dur-key, ease-key) -> builds a canonical transition */
@function transition($prop: all, $dur-key: 150, $ease-key: standard) {
  @return #{$prop} #{duration($dur-key)} #{easing($ease-key)};
}
