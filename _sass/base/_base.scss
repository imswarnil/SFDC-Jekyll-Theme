/* ============================================================================
   BASE / BASE
   This file establishes the foundational aesthetic and behavior for the
   entire framework. It translates the design tokens from our "Abstracts"
   layer into tangible, global styles for core elements like the `body`,
   links, and interactive states. This is where the framework's opinionated
   design language is first applied.
   ============================================================================ */

// -----------------------------------------------------------------------------
// 1. Root & Document Styles
// -----------------------------------------------------------------------------

:root {
  // --- Color Scheme Definition ---
  // Define supported color schemes for the document. This allows user agents
  // (browsers) to render UI elements like scrollbars and form controls
  // in a theme-aware manner.
  color-scheme: light dark;

  // --- Scroll Behavior ---
  // Ensure smooth scrolling for in-page links (e.g., hash links).
  // This is a progressive enhancement for a better user experience.
  @media (prefers-reduced-motion: no-preference) {
    scroll-behavior: smooth;
  }
}

body {
  // --- Core Typography ---
  // Set the global font family, size, and color from our design tokens.
  // This is the single source of truth for the site's default text.
  font-family: var(--sfdc-font-body);
  font-size: var(--sfdc-font-size-base);
  color: var(--sfdc-color-text-body);
  line-height: 1.6; // A slightly taller line-height for improved readability in long-form text.

  // --- Background & Theming ---
  // Set the default page background color, which acts as the canvas.
  background-color: var(--sfdc-color-bg-soft);

  // --- Rendering & Performance ---
  // Improve text rendering for crisper fonts on high-DPI screens.
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  // Optimize rendering performance for elements with animations or transitions.
  // It tells the browser to offload the work to the GPU.
  transform: translateZ(0);

  // --- Transitions ---
  // Add a smooth transition for color and background. This is crucial for
  // a seamless experience when toggling light/dark themes.
  transition:
    background-color $sfdc-transition-duration ease,
    color $sfdc-transition-duration ease;
}


// -----------------------------------------------------------------------------
// 2. Global Interaction & State Styles
// -----------------------------------------------------------------------------

/**
 * Define a custom, highly visible, and accessible focus ring.
 * `:focus-visible` is a modern standard that intelligently applies focus styles
 * only for keyboard navigators, avoiding distracting outlines for mouse users.
 * This is a non-negotiable for WCAG accessibility compliance.
 */
:focus-visible {
  outline: none;
  box-shadow: var(--sfdc-focus);
  border-radius: var(--sfdc-radius-sm);
  // Add a transition to the focus ring for a smoother appearance.
  transition: box-shadow 0.1s ease-in-out;
}

/**
 * Apply a custom style for text selection, reinforcing the brand identity.
 */
::selection {
  background-color: var(--sfdc-color-brand);
  color: var(--sfdc-color-bg-hard); // Ensures high contrast for selected text.
}


// -----------------------------------------------------------------------------
// 3. Links & Navigation Primitives
// -----------------------------------------------------------------------------

a {
  color: var(--sfdc-color-link);
  // Remove the default underline for a cleaner, more modern aesthetic.
  // Interaction affordance will be provided by hover states.
  text-decoration: none;
  // Apply a consistent transition for all interactive link states.
  transition:
    color $sfdc-transition-duration ease,
    text-decoration-color $sfdc-transition-duration ease;

  &:hover {
    color: var(--sfdc-color-brand-darker);
    // Add an underline on hover for clear visual feedback.
    text-decoration: underline;
  }
}


// -----------------------------------------------------------------------------
// 4. Content Separators & Generic Containers
// -----------------------------------------------------------------------------

/**
 * Style for horizontal rules (`<hr>`).
 * This provides a subtle, clean, and consistent visual separator.
 */
hr {
  // Use the standard border token for consistency.
  border-top-color: var(--sfdc-color-border);
}

/**
 * Base styles for tables. This provides a clean, readable default for any
 * `<table>` element. More advanced styles (e.g., striped rows, hover effects)
 * should be handled by a dedicated `.sfdc-table` component.
 */
table {
  width: 100%;
  color: var(--sfdc-color-text-body);
  border-color: var(--sfdc-color-border);

  // Provide a subtle container for the table on softer backgrounds.
  background-color: var(--sfdc-color-bg-hard);
  border: 1px solid var(--sfdc-color-border);
  border-radius: if($sfdc-enable-rounded, var(--sfdc-radius-md), 0);
  box-shadow: if($sfdc-enable-shadows, var(--sfdc-shadow-sm), none);
}

th,
td {
  padding: var(--sfdc-spacing-3);
  vertical-align: top;
  // Use a bottom border on cells to create clean, distinct rows.
  border-bottom: 1px solid var(--sfdc-color-border);
  text-align: left;

  // Remove the bottom border from the last row for a cleaner look.
  tbody tr:last-child & {
    border-bottom: 0;
  }
}

thead th {
  color: var(--sfdc-color-text-subtle);
  font-weight: 600;
  vertical-align: bottom;
  border-bottom-width: 2px; // A thicker border for the header row.
}