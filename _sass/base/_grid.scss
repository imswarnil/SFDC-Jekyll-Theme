/* ============================================================================
   LAYOUT / GRID.SCSS (THE DEFINITIVE "PRO-FRAMEWORK" EDITION)
   - A complete, professional, 12-column responsive grid system.
   - Includes containers, rows, columns, offsets, ordering, and alignment.
   - Fully documented and built to be intuitive and powerful.
   ============================================================================ */
@use "sass:map";

/* ============================================================================
   1. CONTAINER
   ============================================================================ */
.sf-container {
  width: 100%;
  margin-inline: auto;
  padding-inline: var(--sf-grid-gap, #{$grid-gutter});

  @each $name, $size in $container-sizes {
    &.sf-container--#{$name} {
      max-width: $size;
    }
  }
}


/* ============================================================================
   2. GRID ROW
   ============================================================================ */
.sf-row {
  display: flex;
  flex-wrap: wrap;
  // Negative margins to counteract the padding on columns, creating a true gutter system.
  margin-top: calc(-1 * var(--sf-grid-gap, #{$grid-gutter}));
  margin-right: calc(-0.5 * var(--sf-grid-gap, #{$grid-gutter}));
  margin-left: calc(-0.5 * var(--sf-grid-gap, #{$grid-gutter}));

  // --- Row Modifiers ---

  &.sf-row--no-gutters {
    margin-right: 0;
    margin-left: 0;

    > .sf-col,
    > [class*="sf-col-"] {
      padding-right: 0;
      padding-left: 0;
    }
  }

  // Horizontal Alignment
  &.sf-justify-start   { justify-content: flex-start; }
  &.sf-justify-center  { justify-content: center; }
  &.sf-justify-end     { justify-content: flex-end; }
  &.sf-justify-around  { justify-content: space-around; }
  &.sf-justify-between { justify-content: space-between; }

  // Vertical Alignment
  &.sf-align-start   { align-items: flex-start; }
  &.sf-align-center  { align-items: center; }
  &.sf-align-end     { align-items: flex-end; }
}


/* ============================================================================
   3. GRID COLUMNS
   ============================================================================ */

// --- Base Column Styles ---
// This is the universal selector for all column classes.
[class*="sf-col-"] {
  width: 100%;
  padding-right: calc(0.5 * var(--sf-grid-gap, #{$grid-gutter}));
  padding-left: calc(0.5 * var(--sf-grid-gap, #{$grid-gutter}));
  margin-top: var(--sf-grid-gap, #{$grid-gutter});
}

// --- SCSS Mixin to generate column, offset, and order classes ---
@mixin make-grid-classes($infix: '') {
  // --- Column Classes ---
  // e.g., .sf-col-6, .sf-col-md-4
  @for $i from 1 through $grid-columns {
    .sf-col#{$infix}-#{$i} {
      flex: 0 0 auto;
      width: percentage($i / $grid-columns);
    }
  }
  .sf-col#{$infix}-auto {
    flex: 0 0 auto;
    width: auto;
  }
  .sf-col#{$infix} {
    flex: 1 1 0;
    width: 0;
    min-width: 0;
  }

  // --- Offset Classes ---
  // e.g., .sf-offset-1, .sf-offset-md-2
  @for $i from 0 through ($grid-columns - 1) {
    .sf-offset#{$infix}-#{$i} {
      margin-left: if($i > 0, percentage($i / $grid-columns), 0);
    }
  }
  
  // --- Order Classes ---
  // e.g., .sf-order-1, .sf-order-md-2
  .sf-order#{$infix}-first { order: -1; }
  .sf-order#{$infix}-last  { order: $grid-columns + 1; }
  @for $i from 0 through $grid-columns {
    .sf-order#{$infix}-#{$i} {
      order: $i;
    }
  }
}


// --- Generate Base (Mobile-First) Classes ---
// No infix, e.g., `.sf-col-12`
@include make-grid-classes();


// --- Generate Responsive Classes for Each Breakpoint ---
@each $name, $bp in $breakpoints {
  @media (min-width: $bp) {
    // Generate classes with the breakpoint infix, e.g., `-sm`
    @include make-grid-classes('-#{$name}');
  }
}