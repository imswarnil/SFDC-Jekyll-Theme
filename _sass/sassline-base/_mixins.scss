// _mixins.scss
// Modern, simplified mixins for the SLDS-themed Jekyll site.
// -------------------------------------------------------------------
// This file has been completely refactored. All mixins related to the
// deprecated modular scale and baseline grid system have been removed.
// What remains are essential, modern utilities for building the theme.
// -------------------------------------------------------------------


// --- 1. Breakpoint / Media Query Mixin ---
// A simple, powerful mixin for creating media queries. It uses the
// semantic breakpoint names defined in our `$breakpoints` map in _variables.scss.
//
// This replaces the overly complex `breakpoint` mixin from the old theme.
//
// USAGE:
// .my-element {
//   width: 100%;
//
//   @include breakpoint('medium') {
//     width: 50%;
//   }
// }
// -------------------------------------------------------------------

@mixin breakpoint($size) {
  // Check if the provided size key (e.g., 'medium') exists in our map.
  @if map-has-key($breakpoints, $size) {
    // If it exists, retrieve the value (e.g., 48em).
    $value: map-get($breakpoints, $size);

    // Create a standard min-width media query. This is the most common
    // use case for mobile-first development.
    @media (min-width: $value) {
      @content;
    }
  }

  // If the key doesn't exist, output a warning in the console.
  @else {
    @warn "The breakpoint '#{$size}' does not exist in the `$breakpoints` map.";
  }
}


// --- 2. Clearfix Mixin ---
// A classic utility for containing floated elements within a parent container.
// While modern layouts often use Flexbox or Grid, this is still useful for
// clearing floats within `.typeset` content where an author might float an image.
//
// USAGE:
// .container-with-floats {
//   @include clearfix;
// }
// -------------------------------------------------------------------

@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}


// --- 3. Visually Hidden Mixin ---
// Hides an element visually but keeps it accessible to screen readers.
// Essential for accessibility (e.g., for descriptive text on icon-only buttons).
//
// USAGE:
// .screen-reader-text {
//   @include visually-hidden;
// }
// -------------------------------------------------------------------

@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}


// --- 4. Deprecated Mixins (REMOVED) ---
// The following mixins from the original theme have been removed because
// they were designed to work with the deprecated modular scale and baseline
// grid systems. Our new token-based system does not require these complex
// calculations.
//
// - @mixin rootsize
// - @mixin maxwidth
// - @mixin measure
// - @mixin ideal-measure
// - @function in-modular-scale
// - @mixin fontsize
// - @mixin baseline
// - @mixin sassline
//
// This simplification is a core part of modernizing the theme and aligning
// it with the principles of the Salesforce Lightning Design System.
// All sizing, spacing, and font styles are now handled by simple, direct
// application of variables from `_variables.scss`.
// -------------------------------------------------------------------